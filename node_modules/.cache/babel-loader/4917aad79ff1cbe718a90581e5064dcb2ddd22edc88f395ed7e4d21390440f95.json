{"ast":null,"code":"//API connection.................................\n// Get the userId dynamically from the login response\nuseEffect(() => {\n  // Simulating the login response, replace this with your actual login data logic\n  const fetchLoginResponse = async () => {\n    try {\n      const loginResponse = await axios.get(\"http://localhost:8000/api/login\"); // Replace with your login endpoint\n      console.log(\"Login response:\", loginResponse.data);\n      if (loginResponse.data && loginResponse.data.userId) {\n        setUserId(loginResponse.data.userId); // Dynamically set userId from response\n      }\n    } catch (error) {\n      console.error(\"Error fetching login response:\", error);\n    }\n  };\n  fetchLoginResponse();\n}, []);\n\n// Fetch doctor profile data based on userId\nuseEffect(() => {\n  if (userId) {\n    axios.get(`http://localhost:8000/doctor/getDoctorByEmail?email=${userId}`) // Use userId as email\n    .then(response => {\n      setProfileData(response.data); // Populate profile data\n    }).catch(error => {\n      console.error(\"Error fetching profile data:\", error);\n    });\n  }\n}, [userId]);\n\n// Handle form submission to save or update the doctor's profile\nconst handleProfileSubmit = async e => {\n  e.preventDefault();\n  try {\n    const response = await axios.post(\"http://localhost:8000/addDoctor\", profileFormData);\n    console.log(\"Response from backend:\", response.data);\n\n    // Clear the form after successful submission\n    setProfileFormData({\n      doctorId: \"\",\n      doctorName: \"\",\n      speciality: \"\",\n      location: \"\",\n      hospitalName: \"\",\n      mobileNo: \"\",\n      email: \"\",\n      experience: \"\",\n      password: \"\"\n    });\n\n    // Set active tab to show updated profile\n    setActiveTab(\"doctorProfile\");\n\n    // Refetch profile data to reflect changes\n    if (userId) {\n      axios.get(`http://localhost:8000/doctor/getDoctorByEmail?email=${userId}`).then(response => setProfileData(response.data)).catch(error => console.error(\"Error refetching profile data:\", error));\n    }\n  } catch (error) {\n    console.error(\"Error submitting profile data:\", error);\n  }\n};","map":{"version":3,"names":["useEffect","fetchLoginResponse","loginResponse","axios","get","console","log","data","userId","setUserId","error","then","response","setProfileData","catch","handleProfileSubmit","e","preventDefault","post","profileFormData","setProfileFormData","doctorId","doctorName","speciality","location","hospitalName","mobileNo","email","experience","password","setActiveTab"],"sources":["D:/Infosys project/Infosys project/Infosys  E-doctor (2)/Infosys  E-doctor/src/components/Doctordashboard.js"],"sourcesContent":[" //API connection.................................\r\n   // Get the userId dynamically from the login response\r\n   useEffect(() => {\r\n    // Simulating the login response, replace this with your actual login data logic\r\n    const fetchLoginResponse = async () => {\r\n      try {\r\n        const loginResponse = await axios.get(\"http://localhost:8000/api/login\"); // Replace with your login endpoint\r\n        console.log(\"Login response:\", loginResponse.data);\r\n\r\n        if (loginResponse.data && loginResponse.data.userId) {\r\n          setUserId(loginResponse.data.userId); // Dynamically set userId from response\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching login response:\", error);\r\n      }\r\n    };\r\n\r\n    fetchLoginResponse();\r\n  }, []);\r\n\r\n  // Fetch doctor profile data based on userId\r\n  useEffect(() => {\r\n    if (userId) {\r\n      axios\r\n        .get(`http://localhost:8000/doctor/getDoctorByEmail?email=${userId}`) // Use userId as email\r\n        .then((response) => {\r\n          setProfileData(response.data); // Populate profile data\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error fetching profile data:\", error);\r\n        });\r\n    }\r\n  }, [userId]);\r\n\r\n  // Handle form submission to save or update the doctor's profile\r\n  const handleProfileSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      const response = await axios.post(\r\n        \"http://localhost:8000/addDoctor\",\r\n        profileFormData\r\n      );\r\n      console.log(\"Response from backend:\", response.data);\r\n\r\n      // Clear the form after successful submission\r\n      setProfileFormData({\r\n        doctorId: \"\",\r\n        doctorName: \"\",\r\n        speciality: \"\",\r\n        location: \"\",\r\n        hospitalName: \"\",\r\n        mobileNo: \"\",\r\n        email: \"\",\r\n        experience: \"\",\r\n        password:\"\",\r\n      });\r\n\r\n      // Set active tab to show updated profile\r\n      setActiveTab(\"doctorProfile\");\r\n\r\n      // Refetch profile data to reflect changes\r\n      if (userId) {\r\n        axios\r\n          .get(`http://localhost:8000/doctor/getDoctorByEmail?email=${userId}`)\r\n          .then((response) => setProfileData(response.data))\r\n          .catch((error) =>\r\n            console.error(\"Error refetching profile data:\", error)\r\n          );\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error submitting profile data:\", error);\r\n    }\r\n  };\r\n"],"mappings":"AAAC;AACE;AACAA,SAAS,CAAC,MAAM;EACf;EACA,MAAMC,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACrC,IAAI;MACF,MAAMC,aAAa,GAAG,MAAMC,KAAK,CAACC,GAAG,CAAC,iCAAiC,CAAC,CAAC,CAAC;MAC1EC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEJ,aAAa,CAACK,IAAI,CAAC;MAElD,IAAIL,aAAa,CAACK,IAAI,IAAIL,aAAa,CAACK,IAAI,CAACC,MAAM,EAAE;QACnDC,SAAS,CAACP,aAAa,CAACK,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;MACxC;IACF,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdL,OAAO,CAACK,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACxD;EACF,CAAC;EAEDT,kBAAkB,CAAC,CAAC;AACtB,CAAC,EAAE,EAAE,CAAC;;AAEN;AACAD,SAAS,CAAC,MAAM;EACd,IAAIQ,MAAM,EAAE;IACVL,KAAK,CACFC,GAAG,CAAC,uDAAuDI,MAAM,EAAE,CAAC,CAAC;IAAA,CACrEG,IAAI,CAAEC,QAAQ,IAAK;MAClBC,cAAc,CAACD,QAAQ,CAACL,IAAI,CAAC,CAAC,CAAC;IACjC,CAAC,CAAC,CACDO,KAAK,CAAEJ,KAAK,IAAK;MAChBL,OAAO,CAACK,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACtD,CAAC,CAAC;EACN;AACF,CAAC,EAAE,CAACF,MAAM,CAAC,CAAC;;AAEZ;AACA,MAAMO,mBAAmB,GAAG,MAAOC,CAAC,IAAK;EACvCA,CAAC,CAACC,cAAc,CAAC,CAAC;EAElB,IAAI;IACF,MAAML,QAAQ,GAAG,MAAMT,KAAK,CAACe,IAAI,CAC/B,iCAAiC,EACjCC,eACF,CAAC;IACDd,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEM,QAAQ,CAACL,IAAI,CAAC;;IAEpD;IACAa,kBAAkB,CAAC;MACjBC,QAAQ,EAAE,EAAE;MACZC,UAAU,EAAE,EAAE;MACdC,UAAU,EAAE,EAAE;MACdC,QAAQ,EAAE,EAAE;MACZC,YAAY,EAAE,EAAE;MAChBC,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAE,EAAE;MACTC,UAAU,EAAE,EAAE;MACdC,QAAQ,EAAC;IACX,CAAC,CAAC;;IAEF;IACAC,YAAY,CAAC,eAAe,CAAC;;IAE7B;IACA,IAAItB,MAAM,EAAE;MACVL,KAAK,CACFC,GAAG,CAAC,uDAAuDI,MAAM,EAAE,CAAC,CACpEG,IAAI,CAAEC,QAAQ,IAAKC,cAAc,CAACD,QAAQ,CAACL,IAAI,CAAC,CAAC,CACjDO,KAAK,CAAEJ,KAAK,IACXL,OAAO,CAACK,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CACvD,CAAC;IACL;EACF,CAAC,CAAC,OAAOA,KAAK,EAAE;IACdL,OAAO,CAACK,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;EACxD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}